{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStartAction = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSucceededAction = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailedAction = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchCollectionsStartAsyncAction = () => dispatch => {\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStartAction());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSucceededAction(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailedAction(error.message)));\n};","map":{"version":3,"sources":["C:/Users/brock.chelle/git/crwn-ecommerce-app/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsStartAction","type","FETCH_COLLECTIONS_START","fetchCollectionsSucceededAction","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailedAction","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsyncAction","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,+BAA1D;AAEA,OAAO,MAAMC,2BAA2B,GAAG,OAAO;AACjDC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AAD2B,CAAP,CAApC;AAIP,OAAO,MAAMC,+BAA+B,GAAIC,cAAD,KAAqB;AACnEH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBAD6C;AAEnEC,EAAAA,OAAO,EAAEF;AAF0D,CAArB,CAAxC;AAKP,OAAO,MAAMG,4BAA4B,GAAIC,YAAD,KAAmB;AAC9DP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADwC;AAE9DH,EAAAA,OAAO,EAAEE;AAFqD,CAAnB,CAArC;AAMP,OAAO,MAAME,gCAAgC,GAAG,MAAOC,QAAD,IAAc;AACnE,QAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,EAAAA,QAAQ,CAACX,2BAA2B,EAA5B,CAAR;AAEAY,EAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,QAAD,IAAc;AACtC,UAAMZ,cAAc,GAAGL,8BAA8B,CAACiB,QAAD,CAArD;AACAL,IAAAA,QAAQ,CAACR,+BAA+B,CAACC,cAAD,CAAhC,CAAR;AACA,GAHD,EAGGa,KAHH,CAGUC,KAAD,IAAWP,QAAQ,CAACJ,4BAA4B,CAACW,KAAK,CAACC,OAAP,CAA7B,CAH5B;AAIA,CARM","sourcesContent":["import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\n\nexport const fetchCollectionsStartAction = () => ({\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSucceededAction = (collectionsMap) => ({\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n\tpayload: collectionsMap,\n});\n\nexport const fetchCollectionsFailedAction = (errorMessage) => ({\n\ttype: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n\tpayload: errorMessage,\n});\n\n\nexport const fetchCollectionsStartAsyncAction = () => (dispatch) => {\n\tconst collectionRef = firestore.collection('collections');\n\tdispatch(fetchCollectionsStartAction());\n\n\tcollectionRef.get().then((snapshot) => {\n\t\tconst collectionsMap = convertCollectionSnapshotToMap(snapshot);\n\t\tdispatch(fetchCollectionsSucceededAction(collectionsMap));\n\t}).catch((error) => dispatch(fetchCollectionsFailedAction(error.message)));\n};\n"]},"metadata":{},"sourceType":"module"}