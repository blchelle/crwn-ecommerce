{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSucceededAction, fetchCollectionsFailedAction } from './shop.actions';\nimport ShopActionTypes from './shop.types';\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSucceededAction(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailedAction(error.message));\n  } // collectionRef.get().then((snapshot) => {\n  // \tconst collectionsMap = convertCollectionSnapshotToMap(snapshot);\n  // \tdispatch(fetchCollectionsSucceededAction(collectionsMap));\n  // }).catch((error) => dispatch(fetchCollectionsFailedAction(error.message)));\n\n}\n\nfunction* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["C:/Users/brock.chelle/git/crwn-ecommerce-app/client/src/redux/shop/shop.sagas.js"],"names":["all","takeLatest","call","put","firestore","convertCollectionSnapshotToMap","fetchCollectionsSucceededAction","fetchCollectionsFailedAction","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SACCA,GADD,EACMC,UADN,EACkBC,IADlB,EACwBC,GADxB,QAEO,oBAFP;AAGA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,+BAA1D;AACA,SAASC,+BAAT,EAA0CC,4BAA1C,QAA8E,gBAA9E;AACA,OAAOC,eAAP,MAA4B,cAA5B;;AAEA,UAAUC,qBAAV,GAAkC;AACjC,MAAI;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACG,8BAAD,EAAiCO,QAAjC,CAAjC;AACA,UAAMT,GAAG,CAACG,+BAA+B,CAACQ,cAAD,CAAhC,CAAT;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACf,UAAMZ,GAAG,CAACI,4BAA4B,CAACQ,KAAK,CAACC,OAAP,CAA7B,CAAT;AACA,GARgC,CAUjC;AACA;AACA;AACA;;AACA;;AAED,UAAUC,qBAAV,GAAkC;AACjC,QAAMhB,UAAU,CAACO,eAAe,CAACU,uBAAjB,EAA0CT,qBAA1C,CAAhB;AACA;;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC5B,QAAMnB,GAAG,CAAC,CAACE,IAAI,CAACe,qBAAD,CAAL,CAAD,CAAT;AACA","sourcesContent":["import {\n\tall, takeLatest, call, put,\n} from 'redux-saga/effects';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSucceededAction, fetchCollectionsFailedAction } from './shop.actions';\nimport ShopActionTypes from './shop.types';\n\nfunction* fetchCollectionsAsync() {\n\ttry {\n\t\tconst collectionRef = firestore.collection('collections');\n\t\tconst snapshot = yield collectionRef.get();\n\t\tconst collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n\t\tyield put(fetchCollectionsSucceededAction(collectionsMap));\n\t} catch (error) {\n\t\tyield put(fetchCollectionsFailedAction(error.message));\n\t}\n\n\t// collectionRef.get().then((snapshot) => {\n\t// \tconst collectionsMap = convertCollectionSnapshotToMap(snapshot);\n\t// \tdispatch(fetchCollectionsSucceededAction(collectionsMap));\n\t// }).catch((error) => dispatch(fetchCollectionsFailedAction(error.message)));\n}\n\nfunction* fetchCollectionsStart() {\n\tyield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\nexport function* shopSagas() {\n\tyield all([call(fetchCollectionsStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}