{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyAbVoej0xfiKfU8q-Xl0BZWKVZhYHe-L6w',\n  authDomain: 'crwn-ecommerce-ba12d.firebaseapp.com',\n  databaseURL: 'https://crwn-ecommerce-ba12d.firebaseio.com',\n  projectId: 'crwn-ecommerce-ba12d',\n  storageBucket: 'crwn-ecommerce-ba12d.appspot.com',\n  messagingSenderId: '119180276073',\n  appId: '1:119180276073:web:f4961968c08d1928738df8',\n  measurementId: 'G-JEZ6463ZR0'\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // Exit function if there is not a user\n  if (!userAuth) return; // Destructure the uid from the userAuth\n\n  const {\n    uid\n  } = userAuth; // Get a snapshot of the users data\n  // const userRef = firestpore.doc(`users/${uid}`);\n\n  const userRef = firestore.doc(`users/${uid}`);\n  const snapshot = await userRef.get(); // If the user doesn't exist then create the user\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;\nexport const getCurrentUser = () => new Promise((resolve, reject) => {\n  const unsubscribe = auth.onAuthStateChanged(userAuth => {\n    unsubscribe();\n    resolve(userAuth);\n  }, reject);\n}); // One time use function for automating low frequency writes to firestore\n// export const addCollectionAndItems = async (collectionKey, objectsToAdd) => {\n// \tconst collectionRef = firestore.collection(collectionKey);\n// \tconst batch = firestore.batch();\n// \tobjectsToAdd.forEach((obj) => {\n// \t\tconst newDocRef = collectionRef.doc();\n// \t\tbatch.set(newDocRef, obj);\n// \t});\n// \treturn batch.commit();\n// };","map":{"version":3,"sources":["C:/Users/brock.chelle/git/crwn-ecommerce-app/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","uid","userRef","doc","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n\tapiKey: 'AIzaSyAbVoej0xfiKfU8q-Xl0BZWKVZhYHe-L6w',\n\tauthDomain: 'crwn-ecommerce-ba12d.firebaseapp.com',\n\tdatabaseURL: 'https://crwn-ecommerce-ba12d.firebaseio.com',\n\tprojectId: 'crwn-ecommerce-ba12d',\n\tstorageBucket: 'crwn-ecommerce-ba12d.appspot.com',\n\tmessagingSenderId: '119180276073',\n\tappId: '1:119180276073:web:f4961968c08d1928738df8',\n\tmeasurementId: 'G-JEZ6463ZR0',\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\t// Exit function if there is not a user\n\tif (!userAuth) return;\n\n\t// Destructure the uid from the userAuth\n\tconst { uid } = userAuth;\n\n\t// Get a snapshot of the users data\n\t// const userRef = firestpore.doc(`users/${uid}`);\n\tconst userRef = firestore.doc(`users/${uid}`);\n\tconst snapshot = await userRef.get();\n\n\t// If the user doesn't exist then create the user\n\tif (!snapshot.exists) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message);\n\t\t}\n\t}\n\n\treturn userRef;\n};\n\nexport const convertCollectionSnapshotToMap = (collections) => {\n\tconst transformedCollection = collections.docs.map((doc) => {\n\t\tconst { title, items } = doc.data();\n\t\treturn {\n\t\t\trouteName: encodeURI(title.toLowerCase()),\n\t\t\tid: doc.id,\n\t\t\ttitle,\n\t\t\titems,\n\t\t};\n\t});\n\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;\n\nexport const getCurrentUser = () => new Promise((resolve, reject) => {\n\tconst unsubscribe = auth.onAuthStateChanged((userAuth) => {\n\t\tunsubscribe();\n\t\tresolve(userAuth);\n\t}, reject);\n});\n\n\n// One time use function for automating low frequency writes to firestore\n// export const addCollectionAndItems = async (collectionKey, objectsToAdd) => {\n// \tconst collectionRef = firestore.collection(collectionKey);\n// \tconst batch = firestore.batch();\n// \tobjectsToAdd.forEach((obj) => {\n// \t\tconst newDocRef = collectionRef.doc();\n// \t\tbatch.set(newDocRef, obj);\n// \t});\n\n// \treturn batch.commit();\n// };\n"]},"metadata":{},"sourceType":"module"}